#include <stdio.h>
#include <stdlib.h>


typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;


TreeNode* createNode(int data) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


int findIndex(int arr[], int start, int end, int value) {
    for (int i = start; i <= end; i++) {
        if (arr[i] == value)
            return i;
    }
    return -1; // Not found
}


TreeNode* bst_construct(int inOrder[], int postOrder[], int inStart, int inEnd, int* postIndex) {
    if (inStart > inEnd)
        return NULL;

    
    TreeNode* root = createNode(postOrder[*postIndex]);
    (*postIndex)--;

    
    if (inStart == inEnd)
        return root;

    
    int inIndex = findIndex(inOrder, inStart, inEnd, root->data);

    
    root->right = bst_construct(inOrder, postOrder, inIndex + 1, inEnd, postIndex);
    
    root->left = bst_construct(inOrder, postOrder, inStart, inIndex - 1, postIndex);

    return root;
}


void bfs(TreeNode* root) {
    if (root == NULL)
        return;

    
    TreeNode* queue[100]; 
    int front = 0, rear = 0;

    
    queue[rear++] = root;

    while (front < rear) {
        
        TreeNode* temp = queue[front++];
        printf("%d ", temp->data);

        
        if (temp->left != NULL)
            queue[rear++] = temp->left;

        
        if (temp->right != NULL)
            queue[rear++] = temp->right;
    }
}

int main() {
    int postOrder[] = {5, 15, 10, 25, 45, 30, 20};
    int inOrder[] = {5, 10, 15, 20, 25, 30, 45};
    int n = sizeof(postOrder) / sizeof(postOrder[0]);

    int postIndex = n - 1;
    TreeNode* root = bst_construct(inOrder, postOrder, 0, n - 1, &postIndex);

    printf("Breadth-first search traversal of the constructed BST:\n");
    bfs(root);
    printf("\n");

    return 0;
}
